# https://docs.gitlab.com/
# https://docs.gitlab.com/ee/ci/yaml/?query=after_script
# This is an demo !
# 1.run in image
# 2.execution sequence: before_script -> stages(prebuild > build > test > deploy) -> after_script
# 3.task demo 
# task_name:
#   image: python:3.9   # docker image for task
#   tags:               # node with tags that run the task
#     - docker
#   stage: prebuild
#   variables:
#     ARTIFACTS_DIR: "build/output/"
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule"
#   script: 
#     - echo "$CI_JOB_ID" > $CI_PROJECT_DIR/CI_JOB_ID.txt
#     - echo "$CI_JOB_NAME" > $CI_PROJECT_DIR/CI_JOB_NAME.txt
#     - echo "script for demo task"
#   only:               # trigger condations: branch, new tag, events etc.
#     - master          # branch
#     - tags            # new tag
#   except:             # trigger except condations.
#     - develop         # any branch except develop
#
#   artifacts:  # output config
#     paths:    # save path
#       - ${ARTIFACTS_DIR}
#       - ./version.txt                     # keep ./version.txt to next stage
#       - $CI_PROJECT_DIR/CI_JOB_ID.txt     # keep CI_JOB_ID.txt to on_failure
#       - $CI_PROJECT_DIR/CI_JOB_NAME.txt   # keep CI_JOB_NAME.txt to on_failure
#     expire_in: 1 day # output expire time: never / 1 day / 2 day
#  
#   when: manual
#   allow_failure:
#     exit_code: 100
#   retry: 2

# 4. failure process demo
# error_process:
#   stage: error
#   script:
#     - SUCCEED_JOB_ID=$(cat $CI_PROJECT_DIR/CI_JOB_ID.txt)     # receive CI_JOB_ID.txt from last succeed task
#     - SUCCEED_JOB_NAME=$(cat $CI_PROJECT_DIR/CI_JOB_NAME.txt) # receive CI_JOB_NAME.txt from last succeed task
#     - echo "final succeed job_id = $SUCCEED_JOB_ID job_name = $SUCCEED_JOB_NAME"
#     - ERROR_JOB_ID=$(($SUCCEED_JOB_ID + 1))
#     - FINAL_JOB_ID=$(($SUCCEED_JOB_ID + 2))
#     - echo "ERROR_JOB_ID = $ERROR_JOB_ID ; FINAL_JOB_ID = $FINAL_JOB_ID"
#     - >
#       if [ "$FINAL_JOB_ID" == "CI_JOB_ID" ]; then
#         echo "failed job_id = $ERROR_JOB_ID"
#       else
#         echo "failed job_id not accessible"
#       fi
#   when: on_failure


image: androidsdk/android-30:latest

variables:
  CI_TOKEN: "apply token from ci platform"
  REPO_NAME: "github.com/coder4869/DevAssistant"
  BRANCH_NAME: "main"
  

stages: # self defined stages, execute by sequence: prebuild > build > test > deploy
  - prebuild
  - build
  - test
  - deploy
  - error


before_script: 
  - echo "build start !"
  - echo "140.82.114.3 github.com" >> /etc/hosts # add ip proxy to /etc/hosts
  - git config --global user.name "coder4869"
  - git config --global user.email "coder4869@github.com"
  - git config --global url."https://oauth2:${CI_TOKEN}@github.com".insteadOf https://github.com


auto_publish:
  tags: 
    - ubuntu-local
  stage: prebuild
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script: 
    - echo "Auto scheduled publish"
    - echo "CI_PIPELINE_SOURCE=$CI_PIPELINE_SOURCE ; CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH ; VERSION_SUFFIX=$VERSION_SUFFIX"
    - python3 scripts/auto_publish.py $CI_COMMIT_BRANCH $VERSION_SUFFIX


build_android:
  dependencies:
    - auto_publish
  stage: build
  variables:
    ARTIFACTS_DIR: "build/output/"
  script: 
    - cd ${CI_PROJECT_DIR}
    - ./gradlew --no-daemon plugin:publishPluginPublicationToMavenLocal -PCOMMIT_TAG=${CI_COMMIT_TAG} # COMMIT_TAG for getAppVersion()
  only:
    - tags
  artifacts:
    paths:
      - ${ARTIFACTS_DIR}
      - ./version.txt
    expire_in: 1 day


run_test:
  stage: test
  variables:
    ARTIFACTS_DIR: "build/output/"
  script: 
    - sh ${CI_PROJECT_DIR}/scripts/test.sh ${CI_JOB_ID}
  only:
    - tags
  artifacts:
    paths:
      - ${ARTIFACTS_DIR}
      - ./version.txt
    expire_in: 1 day


deploy_output:
  stage: deploy
  script: 
    - sh ${CI_PROJECT_DIR}/scripts/deploy.sh
  only:
    - tags


after_script:
  - echo "build finish !"
